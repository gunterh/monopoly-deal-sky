// This file was generated by the XState CLI, please do not edit it manually.
import { assign, createMachine } from 'xstate';

const machine = createMachine(
  {
    context: {
      deck: [],
      cards: {
        '1': {
          type: 'ActionCard',
          name: 'dealBreaker',
          value: 5,
        },
        '2': {
          type: 'ActionCard',
          name: 'dealBreaker',
          value: 5,
        },
        '3': {
          type: 'ActionCard',
          name: 'justSayNo',
          value: 4,
        },
        '4': {
          type: 'ActionCard',
          name: 'justSayNo',
          value: 4,
        },
        '5': {
          type: 'ActionCard',
          name: 'justSayNo',
          value: 4,
        },
        '6': {
          type: 'ActionCard',
          name: 'slyDeal',
          value: 3,
        },
        '7': {
          type: 'ActionCard',
          name: 'slyDeal',
          value: 3,
        },
        '8': {
          type: 'ActionCard',
          name: 'slyDeal',
          value: 3,
        },
        '9': {
          type: 'ActionCard',
          name: 'forcedDeal',
          value: 3,
        },
        '10': {
          type: 'ActionCard',
          name: 'forcedDeal',
          value: 3,
        },
        '11': {
          type: 'ActionCard',
          name: 'forcedDeal',
          value: 3,
        },
        '12': {
          type: 'ActionCard',
          name: 'forcedDeal',
          value: 3,
        },
        '13': {
          type: 'ActionCard',
          name: 'debtCollector',
          value: 3,
        },
        '14': {
          type: 'ActionCard',
          name: 'debtCollector',
          value: 3,
        },
        '15': {
          type: 'ActionCard',
          name: 'debtCollector',
          value: 3,
        },
        '16': {
          type: 'ActionCard',
          name: 'itsMyBirthday',
          value: 2,
        },
        '17': {
          type: 'ActionCard',
          name: 'itsMyBirthday',
          value: 2,
        },
        '18': {
          type: 'ActionCard',
          name: 'itsMyBirthday',
          value: 2,
        },
        '19': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '20': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '21': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '22': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '23': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '24': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '25': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '26': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '27': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '28': {
          type: 'ActionCard',
          name: 'passGo',
          value: 1,
        },
        '29': {
          type: 'ActionCard',
          name: 'house',
          value: 3,
        },
        '30': {
          type: 'ActionCard',
          name: 'house',
          value: 3,
        },
        '31': {
          type: 'ActionCard',
          name: 'house',
          value: 3,
        },
        '32': {
          type: 'ActionCard',
          name: 'hotel',
          value: 4,
        },
        '33': {
          type: 'ActionCard',
          name: 'hotel',
          value: 4,
        },
        '34': {
          type: 'ActionCard',
          name: 'hotel',
          value: 4,
        },
        '35': {
          type: 'ActionCard',
          name: 'doubleTheRent',
          value: 1,
        },
        '36': {
          type: 'ActionCard',
          name: 'doubleTheRent',
          value: 1,
        },
        '37': {
          type: 'MoneyCard',
          name: 'ten',
          value: 10,
        },
        '38': {
          type: 'MoneyCard',
          name: 'five',
          value: 5,
        },
        '39': {
          type: 'MoneyCard',
          name: 'five',
          value: 5,
        },
        '40': {
          type: 'MoneyCard',
          name: 'four',
          value: 4,
        },
        '41': {
          type: 'MoneyCard',
          name: 'four',
          value: 4,
        },
        '42': {
          type: 'MoneyCard',
          name: 'four',
          value: 4,
        },
        '43': {
          type: 'MoneyCard',
          name: 'three',
          value: 3,
        },
        '44': {
          type: 'MoneyCard',
          name: 'three',
          value: 3,
        },
        '45': {
          type: 'MoneyCard',
          name: 'three',
          value: 3,
        },
        '46': {
          type: 'MoneyCard',
          name: 'two',
          value: 2,
        },
        '47': {
          type: 'MoneyCard',
          name: 'two',
          value: 2,
        },
        '48': {
          type: 'MoneyCard',
          name: 'two',
          value: 2,
        },
        '49': {
          type: 'MoneyCard',
          name: 'two',
          value: 2,
        },
        '50': {
          type: 'MoneyCard',
          name: 'two',
          value: 2,
        },
        '51': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '52': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '53': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '54': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '55': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '56': {
          type: 'MoneyCard',
          name: 'one',
          value: 1,
        },
        '57': {
          type: 'PropertyCard',
          name: 'green',
          property: 'North Carolina Avenue',
          value: 4,
          rent: [2, 4, 7],
        },
        '58': {
          type: 'PropertyCard',
          name: 'green',
          property: 'Pacific Avenue',
          value: 4,
          rent: [2, 4, 7],
        },
        '59': {
          type: 'PropertyCard',
          name: 'green',
          property: 'Pennsylvania Avenue',
          value: 4,
          rent: [2, 4, 7],
        },
        '60': {
          type: 'PropertyCard',
          name: 'darkblue',
          property: 'Boardwalk',
          value: 4,
          rent: [3, 8],
        },
        '61': {
          type: 'PropertyCard',
          name: 'darkblue',
          property: 'Park Place',
          value: 4,
          rent: [3, 8],
        },
        '62': {
          type: 'PropertyCard',
          name: 'lightblue',
          property: 'Connecticut Avenue',
          value: 1,
          rent: [1, 2, 3],
        },
        '63': {
          type: 'PropertyCard',
          name: 'lightblue',
          property: 'Oriental Avenue',
          value: 1,
          rent: [1, 2, 3],
        },
        '64': {
          type: 'PropertyCard',
          name: 'lightblue',
          property: 'Vermont Avenue',
          value: 1,
          rent: [1, 2, 3],
        },
        '65': {
          type: 'PropertyCard',
          name: 'red',
          property: 'Kentucky Avenue',
          value: 3,
          rent: [2, 3, 6],
        },
        '66': {
          type: 'PropertyCard',
          name: 'red',
          property: 'Inidiana Avenue',
          value: 3,
          rent: [2, 3, 6],
        },
        '67': {
          type: 'PropertyCard',
          name: 'red',
          property: 'Illinois Avenue',
          value: 3,
          rent: [2, 3, 6],
        },
        '68': {
          type: 'PropertyCard',
          name: 'utility',
          property: 'Water Works',
          value: 2,
          rent: [1, 2],
        },
        '69': {
          type: 'PropertyCard',
          name: 'utility',
          property: 'Electric Company',
          value: 2,
          rent: [1, 2],
        },
        '70': {
          type: 'PropertyCard',
          name: 'yellow',
          property: 'Ventnor Avenue',
          value: 3,
          rent: [2, 4, 6],
        },
        '71': {
          type: 'PropertyCard',
          name: 'yellow',
          property: 'Marvin Gardens',
          value: 3,
          rent: [2, 4, 6],
        },
        '72': {
          type: 'PropertyCard',
          name: 'yellow',
          property: 'Atlantic Avenue',
          value: 3,
          rent: [2, 4, 6],
        },
        '73': {
          type: 'PropertyCard',
          name: 'orange',
          property: 'New York Avenue',
          value: 2,
          rent: [1, 3, 5],
        },
        '74': {
          type: 'PropertyCard',
          name: 'orange',
          property: 'ST. James Place',
          value: 2,
          rent: [1, 3, 5],
        },
        '75': {
          type: 'PropertyCard',
          name: 'orange',
          property: 'Tennessee Avenue',
          value: 2,
          rent: [1, 3, 5],
        },
        '76': {
          type: 'PropertyCard',
          name: 'brown',
          property: 'Baltic Avenue',
          value: 1,
          rent: [1, 2],
        },
        '77': {
          type: 'PropertyCard',
          name: 'brown',
          property: 'Mediterranean Avenue',
          value: 1,
          rent: [1, 2],
        },
        '78': {
          type: 'PropertyCard',
          name: 'purple',
          property: 'ST. Charles Place',
          value: 2,
          rent: [1, 2, 4],
        },
        '79': {
          type: 'PropertyCard',
          name: 'purple',
          property: 'Virginia Avenue',
          value: 2,
          rent: [1, 2, 4],
        },
        '80': {
          type: 'PropertyCard',
          name: 'purple',
          property: 'States Avenue',
          value: 2,
          rent: [1, 2, 4],
        },
        '81': {
          type: 'PropertyCard',
          name: 'railroad',
          property: 'Short Line',
          value: 2,
          rent: [1, 2, 3, 4],
        },
        '82': {
          type: 'PropertyCard',
          name: 'railroad',
          property: 'B. & O. Railroad',
          value: 2,
          rent: [1, 2, 3, 4],
        },
        '83': {
          type: 'PropertyCard',
          name: 'railroad',
          property: 'Reading Railroad',
          value: 2,
          rent: [1, 2, 3, 4],
        },
        '84': {
          type: 'PropertyCard',
          name: 'railroad',
          property: 'Pennsylvania Railroad',
          value: 2,
          rent: [1, 2, 3, 4],
        },
        '85': {
          type: 'PropertyWildCard',
          name: 'tenColor',
        },
        '86': {
          type: 'PropertyWildCard',
          name: 'tenColor',
        },
        '87': {
          type: 'PropertyWildCard',
          name: 'purpleOrange',
          colors: ['purple', 'orange'],
        },
        '88': {
          type: 'PropertyWildCard',
          name: 'purpleOrange',
          colors: ['purple', 'orange'],
        },
        '89': {
          type: 'PropertyWildCard',
          name: 'lightblueBrown',
          colors: ['lightblue', 'brown'],
        },
        '90': {
          type: 'PropertyWildCard',
          name: 'lightblueRailroad',
          colors: ['lightblue', 'railroad'],
        },
        '91': {
          type: 'PropertyWildCard',
          name: 'darkblueGreen',
          colors: ['darkblue', 'green'],
        },
        '92': {
          type: 'PropertyWildCard',
          name: 'railroadGreen',
          colors: ['railroad', 'green'],
        },
        '93': {
          type: 'PropertyWildCard',
          name: 'redYellow',
          colors: ['red', 'yellow'],
        },
        '94': {
          type: 'PropertyWildCard',
          name: 'redYellow',
          colors: ['red', 'yellow'],
        },
        '95': {
          type: 'PropertyWildCard',
          name: 'utilityRailroad',
          colors: ['utility', 'railroad'],
        },
        '96': {
          type: 'RentCard',
          name: 'purpleOrange',
          value: 1,
          colors: ['purple', 'orange'],
        },
        '97': {
          type: 'RentCard',
          name: 'purpleOrange',
          value: 1,
          colors: ['purple', 'orange'],
        },
        '98': {
          type: 'RentCard',
          name: 'railroadUtility',
          value: 1,
          colors: ['railroad', 'utility'],
        },
        '99': {
          type: 'RentCard',
          name: 'railroadUtility',
          value: 1,
          colors: ['railroad', 'utility'],
        },
        '100': {
          type: 'RentCard',
          name: 'greenDarkblue',
          value: 1,
          colors: ['green', 'darkblue'],
        },
        '101': {
          type: 'RentCard',
          name: 'greenDarkblue',
          value: 1,
          colors: ['green', 'darkblue'],
        },
        '102': {
          type: 'RentCard',
          name: 'brownLightblue',
          value: 1,
          colors: ['brown', 'lightblue'],
        },
        '103': {
          type: 'RentCard',
          name: 'brownLightblue',
          value: 1,
          colors: ['brown', 'lightblue'],
        },
        '104': {
          type: 'RentCard',
          name: 'redYellow',
          value: 1,
          colors: ['red', 'yellow'],
        },
        '105': {
          type: 'RentCard',
          name: 'redYellow',
          value: 1,
          colors: ['red', 'yellow'],
        },
        '106': {
          type: 'RentCard',
          name: 'tenColor',
          value: 3,
        },
        '107': {
          type: 'RentCard',
          name: 'tenColor',
          value: 3,
        },
        '108': {
          type: 'RentCard',
          name: 'tenColor',
          value: 3,
        },
      },
      players: [],
      cardsPlayed: 0,
      discardPile: [],
      playerBanks: {},
      playerHands: {},
      playerInTurn: "''",
      selectedCard: "''",
      playerProperties: {},
    },
    id: 'game-machine',
    initial: 'idle',
    states: {
      idle: {
        on: {
          'game.create': {
            target: 'addingPlayers',
          },
        },
      },
      addingPlayers: {
        on: {
          'game.addPlayer': {
            target: 'addingPlayers',
            guard: ({ context, event }) =>
              !!event.player &&
              context.players.length < 5 &&
              !context.players.includes(event.player),
            actions: assign({
              players: ({ context, event }) => {
                const newPlayers = context.players;
                newPlayers.push(event.player);
                return newPlayers;
              },
            }),
          },
          'game.start': {
            target: 'sufflingDeck',
            guard: ({ context }) => context.players.length > 1,
          },
        },
      },
      sufflingDeck: {
        entry: assign({
          deck: ({ context }) => {
            const deckKeys = Object.keys(context.cards);
            const newDeck = [];
            while (deckKeys.length > 0) {
              const index = Math.floor(Math.random() * deckKeys.length);
              newDeck.push(deckKeys[index]);
              deckKeys.splice(index, 1);
            }
            return newDeck;
          },
        }),
        always: {
          target: 'dealingCards',
        },
      },
      dealingCards: {
        entry: assign({
          deck: ({ context }) => {
            const newDeck = [...context.deck];
            newDeck.splice(0, 15);
            return newDeck;
          },
          playerHands: ({ context }) => {
            const playerHands = {};
            const newDeck = [...context.deck];
            context.players.map((player) => {
              // return player hands
              const hand = newDeck.splice(0, 5);
              playerHands[player] = hand;
            });
            return playerHands;
          },
        }),
        always: {
          target: 'playing',
        },
      },
      playing: {
        initial: 'drawingCardsForNextPlayer',
        states: {
          drawingCardsForNextPlayer: {
            entry: [
              assign({
                playerInTurn: ({ context }) => {
                  const pit = context.playerInTurn;
                  const players = context.players;
                  let i = pit ? players.indexOf(pit) + 1 : 0;
                  if (i >= players.length) {
                    i = 0;
                  }
                  return players[i];
                },
              }),
              assign({ cardsPlayed: () => 0 }),
              assign({
                deck: ({ context }) => {
                  const newDeck = [...context.deck];
                  newDeck.splice(0, 2);
                  return newDeck;
                },
                playerHands: ({ context }) => {
                  const newPlayerHands = { ...context.playerHands };
                  const newDeck = [...context.deck];
                  const newHand = [
                    ...newPlayerHands[context.playerInTurn],
                    ...newDeck.splice(0, 2),
                  ];
                  newPlayerHands[context.playerInTurn] = newHand;
                  return newPlayerHands;
                },
              }),
            ],
            always: {
              target: 'playingCards',
            },
          },
          playingCards: {
            always: {
              target: 'drawingCardsForNextPlayer',
              guard: ({ context }) => context.cardsPlayed > 2,
            },
            on: {
              'player.endTurn': {
                target: 'drawingCardsForNextPlayer',
                guard: ({ context, event }) =>
                  context.playerInTurn === event.player,
              },
              'player.playCard': {
                target: 'playingSelectedCard',
                guard: ({ context, event }) =>
                  context.playerInTurn &&
                  context.selectedCard &&
                  context.playerInTurn === event.player,
              },
              'player.selectCard': {
                target: 'playingCards',
                guard: ({ context, event }) =>
                  context.playerInTurn === event.player,
                actions: assign({ selectedCard: ({ event }) => event.card }),
              },
            },
          },
          playingSelectedCard: {
            always: [
              {
                target: 'playingPropertyCard',
                guard: ({ context }) =>
                  context.cards[context.selectedCard] &&
                  (context.cards[context.selectedCard].type ===
                    'PropertyCard' ||
                    context.cards[context.selectedCard].type ===
                      'PropertyWildCard'),
              },
              {
                target: 'playingCards',
              },
            ],
          },
          playingPropertyCard: {
            entry: assign({
              cardsPlayed: ({ context }) => context.cardsPlayed + 1,
              playerHands: ({ context }) => {
                return {
                  ...context.playerHands,
                  [context.playerInTurn]: (
                    context.playerHands[context.playerInTurn] ?? []
                  ).filter((x) => x !== context.selectedCard),
                };
              },
              selectedCard: () => '',
              playerProperties: ({ context }) => {
                return {
                  ...context.playerProperties,
                  [context.playerInTurn]: [
                    ...(context.playerProperties[context.playerInTurn] ?? []),
                    context.selectedCard,
                  ],
                };
              },
            }),
            always: {
              target: 'playingCards',
            },
          },
        },
        onDone: {
          target: 'idle',
        },
      },
    },
    on: {
      'game.restart': {
        target: '.idle',
        actions: assign({
          deck: [],
          players: () => [],
          playerBanks: {},
          playerHands: {},
          playerInTurn: '',
          playerProperties: {},
        }),
      },
    },
    types: {
      events: {} as
        | { type: 'game.start' }
        | { type: 'game.create' }
        | { type: 'game.restart' }
        | { type: 'game.addPlayer'; player: string }
        | { type: 'player.endTurn'; player: string }
        | { type: 'player.playCard'; player: string }
        | { type: 'player.selectCard'; card: string; player: string },
      context: {} as {
        deck: unknown[];
        cards: {};
        players: unknown[];
        cardsPlayed: number;
        discardPile: unknown[];
        playerBanks: {};
        playerHands: {};
        playerInTurn: string;
        selectedCard: string;
        playerProperties: {};
      },
    },
  },
  {
    actions: {},
    actors: {},
    guards: {},
    delays: {},
  },
);
export const skyConfig = {
  actorId: '099e64c1-200e-47ec-805b-f8397f3a2df1',
  machine,
};
